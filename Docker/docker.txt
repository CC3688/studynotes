Docker
    Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 
    cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属
    于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也
    称其为容器。

    精简为：Docker是操作系统层面的虚拟化技术

    传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行
    所需应用进程；
    而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬
    件虚拟。因此容器要比传统虚拟机更为轻便。

Docker的优点：
     1，更高效的利用系统资源
     2，更快速的启动时间
     3，一致的运行环境
     4，持续交付和部署
     5，更轻松的迁移
     6，更轻松的维护和扩展

基本概念
    镜像 Image：
        操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文
        件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 
        root 文件系统。
        镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文
        件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）
        。镜像不包含任何动态数据，其内容在构建之后也不会被改变。
        镜像构建时，利用 Union FS 的技术，将其设计为分层存储的架构会一层层构建，
        前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发
        生在自己这一层。在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添
        加的东西，任何额外的东西应该在该层构建结束前清理掉。

    容器 Container：
        镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 
        和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启
        动、停止、删除、暂停等。
        容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独
        立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己
        的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境
        里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封
        装的应用比直接在宿主运行更加安全。
        容器也是分层存储,每一个容器运行时，是以镜像为基础层，在其上创建一个当前容
        器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。
        容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任
        何保存于容器存储层的信息都会随容器删除而丢失。

    仓库 Repository：一个集中的存储、分发镜像的服务。
        Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 
        Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能
        提供收费服务供用户管理私有镜像。
        除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。


镜像（Image）:
    获取镜像

    docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]

    中括号是可选内容。
    获取镜像的命令至少要这样子：docker pull ubuntu
    Docker 镜像仓库地址：地址的格式一般是 <域名/IP>[:端口号]。默认地址是 
    Docker Hub。
    仓库名：如之前所说，这里的仓库名是两段式名称，即 <用户名>/<软件名>。对于 
    Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。
    仓库名，一般都用软件的名字，如php,centos, : 标签，就是不同的版本号。不写就是默认下载最新版的(latest)。

    列出镜像
    
    docker image ls           只会显示顶层镜像

    镜像 ID 才是镜像的唯一标识，一个镜像可以对应多个标签。因此，ubuntu:16.04 和 ubuntu:latest 拥有相同
    的 ID，则它们对应的是同一个镜像。（删除镜像用标签名时，如果有是一个ID对多个标签的，则只是删除了标签名与
    镜像的联系而已。镜像被其他标签引用，实际还是没删除的。类似于硬联接。）

    查看镜像、容器、数据卷所占用的空间
    docker system df

    虚悬镜像 (dangling image) 
       随着官方镜像维护，发布了新版本后，由于新旧镜像同名，旧镜像名称被取消，从而
       出现仓库名、标签均为 <none> 的镜像。这类无标签镜像也被称为 虚悬镜像。
       查看虚悬镜像指令：
       docker image ls -f dangling=true

       虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除
       这里指的是顶层的虚悬镜像
       docker image prune

    中间层镜像 
        显示包括中间层镜像在内的所有镜像的话，需要加 -a 参数

        docker image ls -a  

        会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间
        层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜
        像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层
        只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了
        一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间
        层镜像也会被连带删除。

    列出部分镜像

        docker image ls ubuntu
        
        可以通过添加参数实现，仓库名

        除此以外，docker image ls 还支持强大的过滤器参数 --filter，或者简写 
        -f。
    
    此外还能以特定格式显示。       需要时再查一下资料吧！

删除本地镜像

    docker image rm [选项] <镜像1> [<镜像2> ...]
    docker rmi [选项] <镜像1> [<镜像2> ...]

    其中，<镜像> 可以是 镜像短 ID、镜像长 ID、镜像名 或者 镜像摘要，只要能区分出
    不同的镜像就行。

    Untagged 和 Deleted
        删除 行为 分为两类，一类是 Untagged，另一类是 Deleted。我们之前介绍
        过，镜像的唯一标识是其 ID 和摘要，而一个镜像可以有多个标签.
        要求删除某个标签的镜像。所以首先需要做的是将满足我们要求的所有镜像标签都取
        消，这就是我们看到的 Untagged 的信息。
        因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的
        标签指向了这个镜像，如果是这种情况，那么 Delete 行为就不会发生。所以并非
        所有的 docker rmi 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而
        已。

        当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删
        除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行
        判断删除。镜像的多层结构让镜像复用变动非常容易，因此很有可能某个其它镜像正
        依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何
        层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明
        明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所
        删除的层数和自己 docker pull 看到的层数不一样的源。

        除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容
        器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以
        镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像
        如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应
        该先将它们删除，然后再来删除镜像。

        与docker image ls 命令来配合
        删除所有仓库名为 redis 的镜像：
            docker image rm $(docker image ls -q redis)
        删除所有在 mongo:3.2 之前的镜像：
        docker image rm $(docker image ls -q -f before=mongo:3.2)

利用 commit 理解镜像构成
        注意： docker commit 命令除了学习之外，还有一些特殊的应用场合，比如被入
        侵后保存现场等。但是，不要使用 docker commit 定制镜像，定制镜像应该使
        用 Dockerfile 来完成。

        镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存
        储，是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层.

        docker commit 命令，可以将容器的存储层保存下来成为镜像换句话说，就是在
        原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新
        镜像的时候，就会拥有原有容器最后的文件变化。

        docker commit [选项] <容器ID或容器名> [<仓库名>[:<标签>]]

        docker history 具体查看镜像内的历史记录
        docker history <仓库名>:<标签>

        docker commit 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实
        际环境中并不会这样使用。
        使用 docker commit 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称
        为黑箱镜像

用 Dockerfile 定制镜像
    Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令
    构建一层，因此每一条指令的内容，就是描述该层应当如何构建。
    Dockerfile的内容为：
    FROM nginx
    RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html

    FROM 指定基础镜像。FROM 是必备的指令，并且必须是第一条指令。除了选择现有镜像为基础镜
    像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存
    在，它表示一个空白的镜像。意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层
    开始存在。

    RUN 指令是用来执行命令行命令的。
        shell 格式：RUN <命令>，就像直接在命令行中输入的命令一样。
        exec 格式：RUN ["可执行文件", "参数1", "参数2"] 这更像是函数调用中的格式

        每一个 RUN 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执
        行这
        些命令，执行结束后，commit 这一层的修改，构成新的镜像。所以要时常提醒自己，
        这并不是在写 Shell 脚本，而是在定义每一层该如何构建。可以用 && 将各个所需
        命令串联起来成一个 RUN 指令，从而达到精简层数。
        并且，为了格式化可以进行了换行。Dockerfile 支持 Shell 类的行尾添加 \ 的
        命令换行方式，以及行首 # 进行注释的格式。良好的格式，比如换行、缩进、注释
        等，会让维护、排障更为容易，这是一个比较好的习惯。
        同时，镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都
        应该清理掉。
        例子：
        FROM debian:jessie

        RUN buildDeps='gcc libc6-dev make' \
            && apt-get update \
            && apt-get install -y $buildDeps \
            && wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz" \
            && mkdir -p /usr/src/redis \
            && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \
            && make -C /usr/src/redis \
            && make -C /usr/src/redis install \
            && rm -rf /var/lib/apt/lists/* \
            && rm redis.tar.gz \
            && rm -r /usr/src/redis \
            && apt-get purge -y --auto-remove $buildDeps
        
        构建镜像：
            在 Dockerfile 文件所在目录执行：

            docker build -t nginx:v3 .

            会采用默认行为，将上下文目录下的名为 Dockerfile 的文件作为 Dockerfile。
            实际上 Dockerfile 的文件名并不要求必须为 Dockerfile，而且并不要求必须位
            于上下文目录中，比如可以用 -f ../Dockerfile.php 参数指定某个文件作为 Dockerfile

            . 表示 镜像构建上下文，表示当前目录为上下文目录

        其它 docker build 的用法： （应该不怎么常用吧！）
            直接用 Git repo 进行构建
            用给定的 tar 压缩包构建
            从标准输入中读取 Dockerfile 进行构建
            从标准输入中读取上下文压缩包进行构建

Dockerfile 指令详解
    COPY 复制文件
        COPY <源路径>... <目标路径>
        COPY ["<源路径1>",... "<目标路径>"]

        指令将从构建上下文目录中 <源路径> 的文件/目录 复制到 新的一层的 镜像内的 <目标路径> 位置

        <源路径> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则
        COPY hom* /mydir/
        COPY hom?.txt /mydir/

        <目标路径> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 
        指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。

        使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于
        镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。

    ADD 更高级的复制文件    比COPY增加了自动解压缩
        在 Docker 官方的 Dockerfile 最佳实践文档 中要求，尽可能的使用 COPY，因为 COPY 的语义很明
        确，就是复制文件而已，而 ADD 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 ADD 的场
        合，就是所提及的需要自动解压缩的场合。
        ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能：
            <源路径> 可以是一个 URL
            <源路径> 为一个 tar 压缩文件的话，ADD 指令将会自动解压缩这个压缩文件到 <目标路径> 去。

    CMD 容器启动命令
        Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。
        CMD 指令就是用于指定默认的容器主进程的启动命令的。

        CMD 指令的格式和 RUN 相似，也是两种格式：
        shell 格式：CMD <命令>
        exec 格式：CMD ["可执行文件", "参数1", "参数2"...]

        ubuntu 镜像默认的 CMD 是 /bin/bash，如果我们直接 docker run -it ubuntu 的话，会直接进入 
        bash。我们也可以在运行时指定运行别的命令，如 docker run -it ubuntu cat /etc/os-release。
        这就是用 cat /etc/os-release 命令替换了默认的 /bin/bash 命令了，输出了系统版本信息。

        在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用
        双引号 "，而不要使用单引号。

        使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。如：
        CMD echo $HOME    在实际执行中，会将其变更为：CMD [ "sh", "-c", "echo $HOME" ]

        Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 
        upstart/systemd 去启动后台服务，容器内没有后台服务的概念。

        CMD service nginx start
        会被理解为 CMD [ "sh", "-c", "service nginx start"] ，主进程实际上是 sh。那么当 
        service nginx start 命令结束后，sh 也就结束了，sh 作为主进程退出了，自然就会令容器退出。

        正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：
        CMD ["nginx", "-g", "daemon off;"]
    
    ENTRYPOINT 入口点
        ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，
        不过比 CMD 要略显繁琐，需要通过 docker run 的参数 --entrypoint 来指定。
        当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作
        为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为：

        <ENTRYPOINT> "<CMD>"

        场景一：让镜像变成像命令一样使用
        FROM ubuntu:16.04
        RUN apt-get update \
            && apt-get install -y curl \
            && rm -rf /var/lib/apt/lists/*
        CMD [ "curl", "-s", "http://ip.cn" ]
        使用 docker build -t myip . 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：   
        $ docker run myip      就可以得到当前的ip
        如果我们希望显示 HTTP 头信息，就需要加上 -i 参数。那么我们可以直接加 -i 参数给 
        docker run myip 么？会报错。因跟在镜像名后面的是 command，运行时会替换 CMD 的默认值。
        因此这里的 -i 替换了原来的 CMD，而不是添加在原来的 curl -s http://ip.cn 后面。

        重新用 ENTRYPOINT 来实现这个镜像：
        FROM ubuntu:16.04
        RUN apt-get update \
            && apt-get install -y curl \
            && rm -rf /var/lib/apt/lists/*
        ENTRYPOINT [ "curl", "-s", "http://ip.cn" ]
        这次我们再来尝试直接使用 docker run myip -i：
        成功了。这是因为当存在 ENTRYPOINT 后，CMD 的内容将会作为参数传给 ENTRYPOINT，而这里 -i 
        就是新的 CMD，因此会作为参数传给 curl。

        场景二：应用运行前的准备工作
            有些时候，启动主进程前，需要一些准备工作。这些准备工作是和容器 CMD 无关的，无论 CMD 为什么，
            都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 ENTRYPOINT 中去执行，
            而这个脚本会将接到的参数（也就是 <CMD>）作为命令，在脚本最后执行。

    ENV 设置环境变量
        格式有两种：
            ENV <key> <value>
            ENV <key1>=<value1> <key2>=<value2>...

            这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直
            接使用这里定义的环境变量。换行用 \，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行
            为是一致的。

            定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。
            如：
            ENV NODE_VERSION 7.2.0

            RUN curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz" \
            && curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
            && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
            && grep " node-v$NODE_VERSION-linux-x64.tar.xz\$" SHASUMS256.txt | sha256sum -c - \
            && tar -xJf "node-v$NODE_VERSION-linux-x64.tar.xz" -C /usr/local --strip-components=1 \
            && rm "node-v$NODE_VERSION-linux-x64.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt \
            && ln -s /usr/local/bin/node /usr/local/bin/nodejs

            定义了环境变量 NODE_VERSION，其后的 RUN 这层里，多次使用 $NODE_VERSION 来进行操作定制。可以
            看到，将来升级镜像构建版本的时候，只需要更新 7.2.0 即可，Dockerfile 构建维护变得更轻松了。
            下列指令可以支持环境变量展开： ADD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、
            STOPSIGNAL、ONBUILD。

            可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 
            Dockerfile 制作更多的镜像，只需使用不同的环境变量即可。

    ARG 构建参数
        格式：ARG <参数名>[=<默认值>]

        构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变
        量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信
        息，因为 docker history 还是可以看到所有值的。

        Dockerfile 中的 ARG 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 
        docker build 中用 --build-arg <参数名>=<值> 来覆盖。

    VOLUME 定义匿名卷
        格式为：
            VOLUME ["<路径1>", "<路径2>"...]
            VOLUME <路径>
           
        容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据
        库文件应该保存于卷(volume)中括号是可选内容。为了防止运行时用户忘记将动态文件所保存目录
        挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户
        不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。

        如：VOLUME /data
        这里的 /data 目录就会在运行时自动挂载为匿名卷，任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：
        docker run -d -v mydata:/data xxxx

        在这行命令中，就使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。
    
    EXPOSE 声明端口
        格式为 EXPOSE <端口1> [<端口2>...]

        EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用
        就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者
        理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也
        就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。

        要将 EXPOSE 和在运行时使用 -p <宿主端口>:<容器端口> 区分开来。-p，是映射宿主端口和容
        器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算
        使用什么端口而已，并不会自动在宿主进行端口映射。

    WORKDIR 指定工作目录

        格式为 WORKDIR <工作目录路径>
        使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定
        的目录，如该目录不存在，WORKDIR 会帮你建立目录。

        错误是把 Dockerfile 等同于 Shell 脚本来书写，如：
            RUN cd /app
            RUN echo "hello" > world.txt
        如果将这个 Dockerfile 进行构建镜像运行后，会发现找不到 /app/world.txt 文件，或者其
        内容不是 hello。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个
        命令修改的内存状态，会直接影响后一个命令；而在 Dockerfile 中，这两行 RUN 命令的执行环
        境根本不同，是两个完全不同的容器。这就是对 Dockerfile 构建分层存储的概念不了解所导致的
        错误。
        每一个 RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 RUN cd /app 的
        执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到
        第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构
        建过程中的内存变化。
        因此如果需要改变以后各层的工作目录的位置，那么应该使用 WORKDIR 指令。

    USER 指定当前用户
        格式：USER <用户名>

        USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，
        USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。

        当然，和 WORKDIR 一样，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，
        否则无法切换。
        以 root 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服
        务进程，不要使用 su 或者 sudo，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出
        错。建议使用 gosu。

    HEALTHCHECK 健康检查
        格式：
            HEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令
            HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令
        支持下列选项：
            --interval=<间隔>：两次健康检查的间隔，默认为 30 秒；
            --timeout=<时长>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视
            为失败，默认 30 秒；
            --retries=<次数>：当连续失败指定次数后，则将容器状态视为 unhealthy，默认 3 次。
   
    ONBUILD 为他人做嫁衣裳 
        格式：ONBUILD <其它指令>
        ONBUILD 是一个特殊的指令，它后面跟的是其它指令，比如 RUN, COPY 等，而这些指令，在当前
        镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。   

Dockerfile使用多阶段构建
    ......



操作 Docker 容器
    启动容器
        启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）
        的容器重新启动。

        新建并启动：
            所需要的命令主要为 docker run
            如：
            docker run -t -i ubuntu:14.04 /bin/bash
            -t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， 
            -i 则让容器的标准输入保持打开
            镜像后面 /bin/bash 则是设置CMD,即进程开启时做什么。
    
        启动已终止容器
            docker container start  容器标识  [-i]
            就可以这样启动 相应的容器 [-i 可以直接进入]

    后台运行
        让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 
        -d 参数来实现
        docker logs 查看容器会在后台运行输出的结果
        docker container logs [container ID or NAMES]

    终止容器
        docker container stop [container ID or NAMES]     来终止一个运行中的容器

        终止状态的容器可以用 docker container ls -a 命令看到

        docker container start [container ID or NAMES] 命令来重新启动。

        docker container restart [container ID or NAMES] 命令会将一个运行态的容器终止，
        然后再重新启动它。

    进入容器
        在使用 -d 参数时，容器启动后会进入后台。

        某些时候需要进入容器进行操作，
        docker attach [container ID or NAMES] 
        docker exec   [container ID or NAMES]      推荐

        attach 命令 从这个 stdin 中 exit，会导致容器的停止

        exec 命令 后边可以跟多个参数，这里主要说明 -i -t 参数。只用 -i 参数时，由于没有分配伪
        终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。当 -i -t 参数一
        起使用时，则可以看到我们熟悉的 Linux 命令提示符。从这个 stdin 中 exit，不会导致容器的
        停止。

    导出和导入容器
        导出容器
            导出本地某个容器，可以使用 docker export 命令
            如： docker export 7691a814370e > ubuntu.tar
            将导出容器快照到本地文件
        导入容器快照
            使用 docker import 从容器快照文件中再导入为镜像
            cat ubuntu.tar | docker import - test/ubuntu:v1.0
            此外，也可以通过指定 URL 或者某个目录来导入

            docker load   来导入 镜像存储文件  到 本地镜像库
                          保存完整记录，体积比较大

            docker import 来导入 一个容器快照  到 本地镜像库 
                          丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态）
                          从容器快照文件导入时可以重新指定标签等元数据信息
        
    删除容器
        docker container rm  [container ID or NAMES]  来删除一个处于终止状态的容器 
        要删除一个运行中的容器，可以添加 -f 参数。

        清理所有处于终止状态的容器
            用 docker container ls -a 命令可以查看所有已经创建的包括终止状态的容器
            用下面的命令可以清理掉所有处于终止状态的容器
            docker container prune

访问仓库
    仓库（Repository）是集中存放镜像的地方。注册服务器是管理仓库的具体服务器，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像。

    Docker Hub
        目前 Docker 官方维护了一个公共仓库 Docker Hub。
        docker login 命令交互式的输入用户名及密码来完成在命令行界面登录 Docker Hub
        docker logout 退出登录
    
    拉取镜像
        docker search 命令来查找官方仓库中的镜像
        docker pull 命令来将它下载到本地

        类似 centos 这样的镜像，被称为基础镜像或根镜像。这些基础镜像由 Docker 公司创建、验
        证、支持、提供。这样的镜像往往使用单个单词作为名字。
        另一种类型，比如 tianon/centos 镜像，它是由 Docker 的用户创建并维护的，往往带有用户
        名称前缀。可以通过前缀 username/ 来指定使用某个用户提供的镜像，比如 tianon 用户。

    推送镜像
        用户也可以在登录后通过 docker push 命令来将自己的镜像推送到 Docker Hub。

        docker tag ubuntu:17.10 username/ubuntu:17.10  先修改一下镜像的tag name
        docker push username/ubuntu:17.10              再推送上去

    自动创建
        允许用户通过 Docker Hub 指定跟踪一个目标网站（目前支持 GitHub 或 BitBucket）上的项
        目，一旦项目发生新的提交或者创建新的标签（tag），Docker Hub 会自动构建镜像并推送到 
        Docker Hub 中。

    私有仓库
        有时候使用 Docker Hub 这样的公共仓库可能不方便，用户可以创建一个本地仓库供私人使用。
        docker-registry 是官方提供的工具，可以用于构建私有的镜像仓库。

        安装运行 docker-registry
        。。。。。
        。。。。。

Docker 数据管理
    数据卷（Volumes）
        是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：
            数据卷 可以在容器之间共享和重用
            对 数据卷 的修改会立马生效
            对 数据卷 的更新，不会影响镜像
            数据卷 默认会一直存在，即使容器被删除

        数据卷 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的
        文件会隐藏掉，能显示看的是挂载的 数据卷

        Docker 新用户应该选择 --mount 参数，经验丰富的 Docker 使用者对 -v 或者 --volume 
        已经很熟悉了，但是推荐使用 --mount 参数。

    创建一个数据卷
        docker volume create [volume name]

    查看所有的 数据卷
        docker volume ls

    启动一个挂载数据卷的容器
        docker run 命令的时候，使用 --mount 标记来将 数据卷 挂载到容器里。
        如：
            下面创建一个名为 web 的容器，并加载一个 数据卷 到容器的 /webapp 目录
            docker run -d -P \
                --name web \
                # -v my-vol:/wepapp \
                --mount source=my-vol,target=/webapp \
                training/webapp \
                python app.py

    查看数据卷的具体信息
        在主机里使用以下命令可以查看 web 容器的信息
             docker inspect web
    
    删除数据卷
        docker volume rm my-vol

        数据卷 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动
        删除 数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 数据卷。如果需要在删
        除容器的同时移除数据卷。可以在删除容器的时候使用 docker rm -v 这个命令。

        无主的数据卷可能会占据很多空间，要清理请使用以下命令

        $ docker volume prune

    挂载主机目录

        挂载一个主机目录作为数据卷
            使用 --mount 标记可以指定挂载一个本地主机的目录到容器中去。
            $ docker run -d -P \
                --name web \
                # -v /src/webapp:/opt/webapp \
                --mount type=bind,source=/src/webapp,target=/opt/webapp \
                training/webapp \
                python app.py
            
            上面的命令加载主机的 /src/webapp 目录到容器的 /opt/webapp目录。这个功能在进行测
            试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地
            目录的路径必须是绝对路径，以前使用 -v 参数时如果本地目录不存在 Docker 会自动为你
            创建一个文件夹，现在使用 --mount 参数时如果本地目录不存在，Docker 会报错。

            Docker 挂载主机目录的默认权限是 读写，用户也可以通过增加 readonly 指定为 只读。
            写在 target=/opt/webapp,readonly 

        查看数据卷的具体信息

            在主机里使用以下命令可以查看 web 容器的信息
            docker inspect web

        挂载一个本地主机文件作为数据卷
            --mount 标记也可以从主机挂载单个文件到容器中

            $ docker run --rm -it \
                # -v $HOME/.bash_history:/root/.bash_history \
                --mount type=bind,source=$HOME/.bash_history,
                target=/root/.bash_history \
                ubuntu:17.10 \
                bash

            root@2affd44b4667:/# history
            1  ls
            2  diskutil list
            这样就可以记录在容器输入过的命令了。

Docker中的网络功能介绍
    外部访问容器
        容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参数来指定端
        口映射。（可以一次指定多个，每一个用一个 -p）
        使用 -P 标记时，Docker 会随机映射一个 49000~49900 的（本地主机）端口  到  内部容器开放的网络端口。
        -p 则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 
        ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort。

        映射所有接口地址：
            使用 hostPort:containerPort 格式本地的 5000 端口映射到容器的 5000 端口，可以
            执行
            $ docker run -d -p 5000:5000 training/webapp python app.py
            此时默认会绑定本地所有接口上的所有地址。
        
        映射到指定地址的指定端口：
            可以使用 ip:hostPort:containerPort 格式指定映射使用一个特定地址，比如 
            localhost 地址 127.0.0.1
            $ docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py

        映射到指定地址的任意端口：
            使用 ip::containerPort 绑定 localhost 的任意端口到容器的 5000 端口，本地主机
            会自动分配一个端口。
            $ docker run -d -p 127.0.0.1::5000 training/webapp python app.py
            还可以使用 udp 标记来指定 udp 端口
            $ docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py

        查看映射端口配置
            使用 docker port 来查看当前映射的端口配置，也可以查看到绑定的地址
            $ docker port nostalgic_morse 5000    

    容器互联:
        Docker以前常用 --link 参数来使容器互联。随着 Docker 网络的完善，建议将容器加入自
        定义的 Docker 网络来连接多个容器，而不是使用 --link 参数。 

        新建网络：
            下面先创建一个新的 Docker 网络。
            docker network create -d bridge my-net 
            -d 参数指定 Docker 网络类型，有 bridge overlay。其中 overlay 网络类型用于 
            Swarm mode
        连接容器:
            运行一个容器并连接到新建的 my-net 网络
            docker run -it --rm --name busybox1 --network my-net busybox sh
            打开新的终端，再运行一个容器并加入到 my-net 网络
            docker run -it --rm --name busybox2 --network my-net busybox sh
            这样，busybox1 容器和 busybox2 容器建立了互联关系。

            如果你有多个容器之间需要互相连接，推荐使用 Docker Compose

    配置 DNS
        如何自定义配置容器的主机名和 DNS 呢？秘诀就是 Docker 利用虚拟文件来挂载容器的 3 个相
        关配置文件。
        。。。。。。

高级网络配置
    。。。。。。


Docker Compose 项目







