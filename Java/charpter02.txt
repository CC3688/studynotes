字面量和常量
    常量：程序中固定不变化的值。   
        常量分类:
            字面值常量: 比如：整数常量1，2，3，小数常量3.14，布尔常量false，true等。.
            字面量,就表示直接给出的一个值(可以是整数,小数,true,false等等),直接量.
            定义的final变量:    
    变量:表示存储空间，可用来存放某一类型的常量，没有固定值，并可以重复使用，
        也可以用来存储某种类型的未知数据。
        变量的特点：
            ①　占据着内存中的某一块存储区域；
            ②　该区域有自己的名称（变量名）和类型（数据类型）；
            ③　可以被重复使用;
            ④　该区域的数据可以在同一类型范围内不断变化；
        变量的定义：
            先定义变量,再赋值:
            数据类型  变量名;
            变量名 = 值;
            或在声明时同时赋值:
            数据类型  变量名  =  初始化值

            注：格式是固定的，记住格式，以不变应万变。
            不推荐:同时定义多个变量.

Java表达式
    表达式(expression):是由数字、运算符、数字分组符号（括号）、常量、变量等
    以能求得结果的有意义排列的组合。
    用运算符号连接的变量/常量可称为表达式。那么也就是说表达式是由常量、变量、
    运算符、括号组成能求得值的有意义结果的语句。

数据类型和分类
    在Java中数据类型整体上分成两大类:
     1):基本数据类型/原生数据类型,共8个:
            1>:数值型:
                    整数类型:byte,short,int,long,
                        不同的整数类型在内存占用的内存空间大小是不一样的.
                    小数类型:float,double.
            2>:字符型:char,什么是字符,字母/符号.
            3>:布尔型:boolean,表示对与错.true,false.

     2):引用数据类型/对象数据类型:
              类/接口/数组

数据类型:   1字节 = 8占位
    byte       1字节  [-128,127]              默认值 0   (-128~127)
    short      2字节  [-2的15次方,2的15次方-1]  默认值 0   (-32768~32767)
    int        4字节  [-2的31次方,2的31次方-1]  默认值 0   (-20亿多~20亿多)
    long       8字节  [-2的63次方,2的63次方-1]  默认值 0L  (大于20多亿很多 )
    char       2字节  [0,2的16次方-1]          默认值 0   
    float      4字节  [-3.4E38,3.4E38]        默认值 0
    double     8字节  [-1.7E308,1.7E308]      默认值 0
    boolean    1位    false true              默认值 false

    boolean类型：通常用于逻辑运算和程序流程控制(条件选择/循环)。
    该类型的值只能是true 或 false，表示真或假。
    不可以使用0或非0的整数来代替false和true，区分于C语言。
    （其实在JVM中对boolean的处理也是用0表示false，非0表示true的。）
    false和true是boolean的常量

整数类型(byte-short-int-long):
    byte、short、int、long类型：
    整型常量的四种表示形式：
    ①　二进制整数：0B或0b开头（Java7的新特性），如：int a = 0B110;
    ②　八进制整数：要求以0开头，如 int a = 012;
    ③　十进制整数：如：int a = 17;
    ④　十六进制整数：要求0X或0x开头，如int a = 0x12;

    Java语言的整型常量默认是int型，声明long型变量后加上‘l’或‘L，因小写的l容易和
    数字1相混淆，建议使用大写L。

    默认情况下,一个整型的字面量默认是int类型.

    byte,short,int,long唯一的不同就是存储空间的容量大小不一样.
    根据具体需要存储的数据去选择合适的数据类型, 一般的,使用int即可.

小数类型(float-double):
    float、double类型：
    表示小数类型又称为浮点类型，其中float表示单精度类型，double表示双精度类型，但是二者
    都不能表示精确的小数。

    Java的浮点类型常量有两种表现形式：
    十进制形式： 例如：3.14 ，168.0， .618
    科学计数法形式： 例如：3.14e2， 3.14E2， 1000E-2
    科学计数法表达式返回的结果是double类型。

    默认情况下,一个浮点类型的字面量默认是double类型.若要声明一个常量为float型，则需在常
    量后加上f  或 F，double常量后面的D或d可省略。
    注意：Java里只有浮点型的变量才可以接受科学计算式结果：

    因为float和double都不能精确的表示小数，那么在精度要求高的系统比如银行系统里，那怎么表示精确的小数呢？后面我们会讲BigDecimal类型，它表示任意精度的数据

字符类型(char):字符,字母和符号.
    char类型：表示16位的无符号整数或者Unicode字符，Java对字符采用Unicode字符编码。
    Unicode收集了世界上所有语言文字中的符号，是一种跨平台的编码方式，Java的字符占两个字
    节，可以表示一个汉字。

    什么是编码？
    计算机只能表示0和1两个数，于是人们做规定使用一个数字去表示一个特定的字符，比如a使用97
    表示。
    char前256个字符和ASCII（美国信息交互标准编码）码中的字符重复。
    ------------------------------------------------------------------------
    char常量有3种表示形式：
    ①　直接使用单个字符来指定字符常量，格式如'◆'、'A'，'7'；
    ②　直接作为十进制整数数值使用，但是数据范围在[0，65535]，格式如97，但是打印出来的值依然是ASCII码表对于的符号,如97打印出来是字符a。
    ③　和2一样，只不过表示的是16进制的数值，格式如'\uX'，X表示16进制整数；如：97的16进制是61。那么表示为‘\u0061’打印出来也是a。
    所以有人说char本质上也是整型，也是有道理的。
    char前256个字符和ASCII（美国信息交互标准编码）码中的字符重复，可查表。

最常用的引用类型-String
    除了8种基本数据类型，其他所有类型都是引用数据类型，包括类、接口、数组。引用数据类型默
    认初始值都是null。
    String是一个类，表示字符串（后面详讲），所谓字符串，就是一串字符，也就是N个字符连接
    在一起（N可以表示0或多个），好比羊肉串。
    字符串都得使用 "" 括起来的，连接字符串使用 “+”符号

数据过大和溢出
    当要表示的数据超出数据类型的临界范围时，称为溢出。溢出情况发生时程序并没有做数据范围
    检查处理，此时会出现数据紊乱情况。

基本数据类型转换
    在8大基本数据类型中,boolean不属于数值类型,不参与转换

    自动类型转换，也称为“隐式类型转换:
        当把小数据范围类型的数值或变量赋给另一个大数据范围类型变量，系统可以完成自动类型
        转型。这好比把装一斤水容器里的水倒进可以装两斤水的容器里一样。

        再次强调:boolean 类型是不可以转换为其他数据类型
    
    强制类型转换，也称为“显示类型转换”:
        当把大范围类型的数值或变量赋给另一个小范围类型变量时，此时系统不能自动完成转换，
        需要加上强制转换符，但这样的操作可能造成数据精度的降低或溢出，所以使用时要格外
        注意。
        这就好比把装两斤水容器里的水倒在可以装一斤水的容器里，是可能造成水溢出的。
        若要坚持把4斤苹果塞进一个装3斤的袋子里，我们要怎么办？动用暴力。
        强制类型转换，可能造成溢出和精度损失。

        为什么byte c = 5这是符合强转类型转换条件的，可为什么没转呢？
        整数常量,默认是int类型
        把一个int类型常量直接赋值byte类型变量 byte b2=125;
        编译器,发现125在byte的范围之内,底层偷偷转换了

表达式类型的自动提升:
    当一个算术表达式中包含多个基本数据类型(boolean除外)的值时，整个算术表达式的数据
    类型将在数据运算时出现类型自动提升，其规则是：
    所有的byte、short、char类型被自动提升到int类型；
    整个表达式的最终结果类型被提升到表达式中类型最高的类型；

    String和任意数据使用 + 连接起来,结果都是String(字符串).

算术运算符:
    加号：在操作数值、字符、字符串时其结果是不同的，当两个字符相加得到的是ASCII码表值，
    当两个字符串相加时表示将两个字符串连接在一起，从而组成新的字符串。
    除号：整数在使用除号操作时，得到的结果仍为整数（小数部分忽略），当整数除以0的时候，
    会引发算术异常。
            正无穷大(Infinity):当一个正浮点类型数除以0时,或者正整数除以0.0时;
            负无穷大(-Infinity):当一个负浮点类型数除以0时,或者负整数除以0.0时;
            NaN(Not a Number):当0.0除以0.0时;

    取模(求余数)：模数的符号忽略不计，结果的正负取决于被模数.
    注意：无穷大和NaN都属于double浮点类型,但是所有正无穷大都是相等的,所有负无穷大也是
    相等的,NaN永远不相等,也不等于自己.

    ++和--详解: 都只能操作变量,不能操作常量.
        ++: 表示当前操作变量自己累加1.
        --:  表示当前操作变量自己减去1.   
        -----------------------------------------------------
        自增：++，递增操作符，使变量值增加1，有前置和后置之分，只能操作变量。
        自减：-- ，递减操作符，使变量值减去1，有前置和后置之分，只能操作变量。
        自增和自减具体操作是一样的，仅仅是一个是加1，一个是减1而已，现在单讲++：
        代码 result ++和 ++result，都将使result变量的值加1。
        唯一的区别是：
        前置（++result）:   表示对result加1之后的结果进行运算，
        后置（result++）:   表示对result变量加1之前的值（原始值）进行运算。
        如果仅仅执行简单的递增操作（只写result++或++result），那么选用任意一个都可以

    赋值运算符:专门为变量指定值或重新指定值
        注意Java支持同时给多个变量赋值，好比支持同时声明多个变量一样，但因影响代码可读
        性，故也不推荐。
        加等于：x  +=  5; 相当于 x  =  x  +  5，但还包括隐式类型转换。
        public class Hello{ 
            public static void main(String[] args){ 
            int a, b, c;   //不推荐
            a = b = c = 5; //不推荐
            short s = 5;
            //s = s + 3;//编译出错，需要强转  s = (short)(s + 3); 
            s += 3;//编译OK，隐式类型转换
            }
        }

    比较运算符:
        用于比较两个变量或常量之间的关系，比较运算符的结果是boolean类型,其操作格式为:
        boolean  result = 表达式A   比较运算符   表达式B;
        -------------------------------------------------------------
        ==：等于，若比较的是两个操作数都是数值类型，即使他们的类型不同，
        只要值相同就返回true。
        当然==也可以比较引用数据类型。
    
    三元运算符:
        三元运算符，表示有三个元素参与的表达式，所以又称为三目运算符，其语义表示
        if-else.
        语法格式：X  ?  Y ：Z， 
        其中x为boolean类型表达式，先计算X的值，若X结果为true则整个三目运算表达式的
        结果是Y，否则就是Z。三目运算符结果的类型由Y和Z决定

    逻辑运算符:
        用于操作两个boolean类型的变量或常量，结果类型也是boolean。
        语法格式为:boolean  result = 表达式A   逻辑运算符   表达式B;
      ------------------------------------------------------------------
        &：表示并且，当操作数A和B都为true结果才为true，否则结果result 是false。
        &&：和&结果相同，具有短路效果，如果左边操作数A是false，result 一定为false，
        且不运行B的运算。
        |：表示或者，A和B都为false结果result为false，只要有A或B是true，结果就是true。
        ||：和|结果相同，具有短路效果，如果左边操作数A是true，result一定为true，
            且不运行B的运算。
        ^：判断A和B是否不同，不同则为true，相同则为false。
        !：取反，!true结果是false，!fasle结果是true。

    位运算符:
        位操作是程序设计中对位模式按位或二进制数的一元和二元操作

        <<：将操作数的二进制码整体左移指定位数，左移之后的空使用“0”来补充。
        >>：将操作数的二进制码整体右移指定位数，右移之后的空使用“符号位”来补充：
        若是正数使用“0”补充；
        若是负数使用“1”补充；（操作负数：取反，求补，操作，取反，求补）
        >>>：将操作数的二进制码整体右移指定位数，右移之后的空位使用“0”来补充

        遵循规则：
        &：参与运算的两个数，若相应位数的值都为1，则该位结果值是1，否则是0。
        |：参与运算的两个数相应位中只要有一个1，结果就是1。
        ^：参与运算的两个数相应位相同则结果为0，否则为1。
        ~ ：表示把每个二进制位的“1”换成“0”，把“0”换成“1”。

运算符的操作优先级:
        和数学差不多,要是太复杂了,就加() 这样也比较容易阅读

