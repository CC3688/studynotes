模块:
    在Node环境中，一个.js文件就称之为一个模块（module）
    模块的名字就是文件名（去掉.js后缀)
    使用require()引入模块的时候，请注意模块的相对路径
    如果只写模块名 则Node会依次在内置模块、全局模块和当前模块下查找 你很可能会得到一个错误

CommonJS规范:
    这种模块加载机制被称为CommonJS规范。在这个规范下，每个.js文件都是一个模块，它们内部各
    自使用的变量名和函数名都互不冲突

    一个模块想要对外暴露变量（函数也是变量），可以用module.exports = variable;，一个模
    块要引用其他模块暴露的变量，用var ref = require('module_name');就拿到了引用模块的
    变量

    强烈建议使用  module.exports = xxx  的方式来输出模块变量  (还有另一种不建议的用法)
    如:
    module.exports = {
    foo: function () { return 'foo'; }
    };

    module.exports = function () { return 'foo'; };

基本模块
    global
        Node.js环境中，也有唯一的全局对象，但不叫window，而叫global，这个对象的属性和
        方法也和浏览器环境的window不同

    process
        process也是Node.js提供的一个对象，它代表当前Node.js进程。通过process对象可以
        拿到许多有用信息  process === global.process  -->true
        process.cwd()  -->返回当前工作目录

fs
    Node.js内置的fs模块就是文件系统模块，负责读写文件
    异步读文件:
    var fs = require('fs');
    fs.readFile('sample.txt', 'utf-8', function (err, data) {
        if (err) {
            console.log(err);
        } else {
            console.log(data);
        }
    })
    传入的回调函数接收两个参数，当正常读取时，err参数为null，data参数为读取到的String。当读取发生错误时，err参数代表一个错误对象，data为undefined。这也是Node.js标准的回调函数：第一个参数代表错误信息，第二个参数代表结果
    如果读的是二进制文件,就,第二个参数'utf-8'不要传   data返回Buffer对象

    同步读文件:
        var fs = require('fs');
        var data = fs.readFileSync('sample.txt', 'utf-8');
        console.log(data);

    同步读取文件发生错误，则需要用try...catch捕获该错误
    try{
        上面的同步读文件代码
    }catch(err){
        出错了...
    }

    写文件:  fs.writeFile    (同步写: writeFileSync)
    data = 'hello world'
    fs.writeFile('文件',data,callback)
    如果文件不存在则新建

    fs.stat   获取文件大小，创建时间等信息
    fs.stat(文件,function(err,stat){
        if(err){
            ...
        }else{
            stat.isFile()  //是不是文件,返回布尔值
            stat.isDirectory()  //是不是目录,返回布尔值
            if(文件){
                stat.size       //文件的大小
                stat.birthtime  //创建时间
                stat.mtime      //修改时间
            }            
        }
    })
    异步还是同步:
        由于Node环境执行的JavaScript代码是服务器端代码，所以，绝大部分需要在服务器运行期反复执行业务逻辑的代码，必须使用异步代码，否则，同步代码在执行时期，服务器将停止响应，因为JavaScript只有一个执行线程。

        服务器启动时如果需要读取配置文件，或者结束时需要写入到状态文件时，可以使用同步代码，因为这些代码只在启动和结束时执行一次，不影响服务器正常运行时的异步执行
    
    stream
        是Node.js提供的又一个仅在服务区端可用的模块，目的是支持“流”这种数据
        结构
        从文件流读取文本内容的示例:
        var fs = require('fs');

        // 打开一个流:
        var rs = fs.createReadStream('sample.txt', 'utf-8');
        rs.on('data', function (chunk) {
            console.log('DATA:')
            console.log(chunk);
        });
        rs.on('end', function () {
            console.log('END');
        });
        rs.on('error', function (err) {
            console.log('ERROR: ' + err);
        });
        data事件可能会有多次，每次传递的chunk是流的一部分数据

        以流的形式写入文件，只需要不断调用write()方法，最后以end()结束：

        var fs = require('fs');
        var ws1 = fs.createWriteStream('output1.txt', 'utf-8');
        ws1.write('使用Stream写入文本数据...\n');
        ws1.write('END.');
        ws1.end();

        pipe
        就像可以把两个水管串成一个更长的水管一样，两个流也可以串起来。一个
        Readable流和一个Writable流串起来后，所有的数据自动从Readable流进
        入Writable流，这种操作叫pipe。

        在Node.js中，Readable流有一个pipe()方法，就是用来干这件事的。

        pipe()把一个文件流和另一个文件流串起来，这样源文件的所有数据就自动写
        入到目标文件里了，所以，这实际上是一个复制文件的程序

        var fs = require('fs');
        var rs = fs.createReadStream('sample.txt');
        var ws = fs.createWriteStream('copied.txt');
        rs.pipe(ws);

        默认情况下，当Readable流的数据读取完毕，end事件触发后，将自动关闭
        Writable流。如果我们不希望自动关闭Writable流，需要传入参数：
        readable.pipe(writable, { end: false });
http 模块  一般会用第三方的 express  koa2
    要开发HTTP服务器程序，从头处理TCP连接，解析HTTP是不现实的。这些工作实际
    上已经由Node.js自带的http模块完成了。应用程序并不直接和HTTP协议打交道，
    而是操作 http模块提供的request和response对象。

url
    解析URL需要用到Node.js提供的url模块，它使用起来非常简单，通过parse()将
    一个字符串解析为一个Url对象
    var url = require('url');
    console.log(url.parse('http://user:pass@host.com:8080/path/to/file?query=string#hash'));

    Url {
        protocol: 'http:',
        slashes: true,
        auth: 'user:pass',
        host: 'host.com:8080',
        port: '8080',
        hostname: 'host.com',
        hash: '#hash',
        search: '?query=string',
        query: 'query=string',
        pathname: '/path/to/file',
        path: '/path/to/file?query=string',
        href: 'http://user:pass@host.com:8080/path/to/file?query=string#hash' }
    
path    
    处理本地文件目录需要使用Node.js提供的path模块
    var path = require('path');
    // 解析当前目录:
    var workDir = path.resolve('.'); // '/Users/michael'
    // 组合完整的文件路径:当前目录+'pub'+'index.html':
    var filePath = path.join(workDir, 'pub', 'index.html');
    // '/Users/michael/pub/index.html'

crypto
    crypto模块的目的是为了提供通用的加密和哈希算法。用纯JavaScript代码实现
    这些功能不是不可能，但速度会非常慢。Nodejs用C/C++实现这些算法后，通过
    cypto这个模块暴露为JavaScript接口，这样用起来方便，运行速度也快