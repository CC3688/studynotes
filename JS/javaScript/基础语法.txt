基本语法
    语法
        JavaScript的语法和Java语言类似，每个语句以;结束，语句块用{...}。但是，JavaScript
        并不强制要求在每个语句的结尾加;，浏览器中负责执行JavaScript代码的引擎会自动在每个语句
        的结尾补上; . 浏览器js引擎自动加分号,在某些情况下会很改变程度的语义,尽量所有的语句都自
        己添加.

        JavaScript本身对嵌套的层级没有限制，但是过多的嵌套无疑会大大增加看懂代码的难度。遇到
        这种情况，需要把部分代码抽出来，作为函数来调用，这样可以减少代码的复杂度.
    注释
        行注释: //
        以//开头直到行末的字符被视为行注释，注释是给开发人员看到，JavaScript引擎会自动忽略：
        块注释: /*...*/
        另一种块注释是用/*...*/把多行字符包裹起来，把一大“块”视为一个注释：
    大小写
        JavaScript严格区分大小写，如果弄错了大小写，程序将报错或者运行不正常。

数据类型和变量
    数据类型:
        Number
            JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型:
            123   0.465  1.25e3    -99   NaN   Infinity
            可以直接做四则运算 规则和数学一样     % 求余运算

        字符串
            字符串是以单引号'或双引号"括起来的任意文本，比如'abc'，"xyz"等等。请注意，''或
            ""本身只是一种表示方式，不是字符串的一部分，因此，字符串'abc'只有a，b，c这3个字
            符。

        布尔值
            布尔值和布尔代数的表示完全一致，一个布尔值只有true、false两种值，要么是true，要
            么是false，可以直接用true、false表示布尔值，也可以通过布尔运算计算出来：
                && 与运算     || 或运算      ! 非运算

        比较运算符    
            当我们对Number做比较时，可以通过比较运算符得到一个布尔值
            实际上，JavaScript允许对任意数据类型做比较

            要特别注意相等运算符==。JavaScript在设计时，有两种比较运算符
            第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果
            第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一
            致，再比较
            由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较
            另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己
            NaN === NaN; // false
            唯一能判断NaN的方法是通过isNaN()函数
            isNaN(NaN); // true

            最后要注意浮点数的相等比较
            这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示
            无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈
            值

        null和undefined
            null表示一个“空”的值，它和0以及空字符串''不同，0是一个数值，''表示长度为0的字符
            串，而null表示“空”。

            在其他语言中，也有类似JavaScript的null的表示，例如Java也用null，Swift用nil，
            Python用None表示。但是，在JavaScript中，还有一个和null类似的undefined，它表示“未定义”。

            JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。事实证
            明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用null。
            undefined仅仅在判断函数参数是否传递的情况下有用。

        数组
            数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数
            据类型。
            数组用[]表示，元素之间用,分隔。
            另一种创建数组的方法是通过Array()函数实现  new Array(1, 2, 3);
            出于代码的可读性考虑，强烈建议直接使用[]
            数组的元素可以通过索引来访问。请注意，索引的起始值为0   arr[index]

        对象
            JavaScript的对象是一组由键-值组成的无序集合
            JavaScript对象的键都是字符串类型，值可以是任意数据类型。
            其中每个键又称为对象的属性
            要获取一个对象的属性，我们用  对象变量.属性名  的方式

        变量
            变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数
            字，还可以是任意数据类型。
            变量在JavaScript中就是用一个变量名表示，变量名是大小写英文、数字、$和_的组合，且
            不能用数字开头。变量名也不能是JavaScript的关键字.变量名也可以用中文，但是，请不
            要给自己找麻烦。
            在JavaScript中，使用等号=对变量进行赋值。可以把任意数据类型赋值给变量，同一个变
            量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用var申明一次
            这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变
            量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。和静态语言相比，动态语言
            更灵活，就是这个原因。
            请不要把赋值语句的等号等同于数学的等号。

        strict模式
            启用strict模式的方法是在JavaScript代码的第一行写上
            'use strict'
            这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict
            模式的浏览器将开启strict模式运行JavaScript。

字符串
    JavaScript的字符串就是用''或""括起来的字符表示。
    如果'本身也是一个字符，那就可以用""括起来，比如"I'm OK"包含的字符是I，'，m，空格，O，K这6
    个字符。
    如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识
    转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字
    符就是\。

    多行字符串
        由于多行字符串用\n写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ` ... ` 表示

    模板字符串
        要把多个字符串连接起来，可以用+号连接  如果有很多变量需要连接，用+号就比较麻烦。
        ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量
        var age = 20;var message = `你今年${age}岁了!`;  ->你今年20岁了

    操作字符串
        str.length   返回字符串的长度

        要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始
        str[index]
        需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，
        也没有任何效果
        JavaScript为字符串提供了一些常用方法，注意，调用这些方法本身不会改变原有字符串的内
        容，而是返回一个新字符串
        str.toUpperCase()  把一个字符串全部变为大写
        str.toLowerCase()  把一个字符串全部变为小写
        str.indexOf('指定的字符串')   会搜索指定字符串出现的位置：
        str.substring(index1,index2)    返回指定索引区间的子串   
                                        从索引 index1 开始 到index2 (不包括index2)
    
数组
    JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素
    要取得Array的长度，直接访问length属性    arr.length
    请注意，直接给Array的length赋一个新的值会导致Array大小的变化

    Array可以通过索引把对应的元素修改为新的值，因此，对Array的索引进行赋值会直接修改这个Array
    请注意，如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化

    大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。然而，JavaScript的Array却不会有任何错误。在编写代码时，不建议直接修改Array的大小，访问索引时要确保索引不会越界。

    indexOf
        与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置
        arr.indexOf(要找的元素)   结果返回要找的元素的位置
    slice
        slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的
        Array

        arr.slice(index1,index2) 从index1开始到index2结束,但不包括index2, 如果没有index2,就是从index1到结束
        注意到slice()的起止参数包括开始索引，不包括结束索引
        如果不给slice()传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地
        复制一个Array
    
    push和pop
        push()向Array的末尾添加若干元素   
                arr.push(元素)  原数组被后面被添加上了元素, 返回数组的新长度
        pop()则把Array的最后一个元素删除掉   
                arr.pop()    原数组arr最后的一个元素被删,返回被删的原素
                空数组继续pop不会报错，而是返回undefined
    
    unshift和shift
        unshift()方法 往 Array的头部添加若干元素
                arr.unshift(元素)  原数组前面被添加上了元素, 返回数组的新长度
        shift()方法则把Array的第一个元素删掉
                arr.shift()    原数组arr第一个元素被删,返回被删的原素
                空数组继续shift不会报错，而是返回undefined
    
    sort
        sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序
        arr.sort()
    
    reverse
        reverse()把整个Array的元素给掉个个，也就是反转,直接修改当前Array的元素位置
    
    splice
        splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素
        arr.splice(index,sum,元素,元素...)
        从index开始(包括index)  删除sum个元素,然后添加元素
        如果没有元素,就是删除  
        如果没有sum=0  就是只添加  在arr[index]之前添加,arr[index]会在新添加的元素后面
        都是直接修改原数组  如果有删除就返回删除的元素,没有就返回 [] 空数组

    concat
        concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array
        arr.concat(收任意个元素和Array)   
        请注意，concat()方法并没有修改当前Array，而是返回了一个新的Array
        实际上，concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里

    join
        join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后
        返回连接后的字符串   如果Array的元素不是字符串，将自动转换为字符串后再连接
        arr.join('-')
    
    多维数组
        如果数组的某个元素又是一个Array，则可以形成多维数组

对象
    JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。
    JavaScript的对象用于描述现实世界中的某个对象。

    JavaScript用一个{...}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。
    注意，最后一个键值对不需要在末尾加,，如果加了，有的浏览器（如低版本的IE）将报错。

    访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。    
            对象.属性    也可以 对象['xxx']  (用下面的方法)
    如果属性名包含特殊字符，就必须用''括起来 访问这个属性也无法使用.操作符，
    必须用['xxx']来访问      对象['xxx']     (只能用这种)

    实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。

    如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是
    返回undefined
    由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性
        对象.新属性名=value   这样就是添加了一个新属性  如果没赋值,就是undefined
        delete 对象.属性名    删除属性  删除一个不存在的属性也不会报错
    
    in操作符
        '属性名' in 对象    要检测 对象  是否拥有 某一属性  返回 布尔值
        不过要小心，如果in判断一个属性存在，这个属性不一定是 此对象的，它可能是 继承得到的

    hasOwnProperty()        
         判断一个属性是否是 对象 自身拥有的，而不是继承得到的，可以用此方法
         对象.hasOwnProperty('属性')      返回 布尔值

条件判断
    JavaScript使用if () { ... } else { ... }来进行条件判断。其中else语句是可选的。
    如果语句块只包含一条语句，那么可以省略{},省略{}的危险之处在于，如果后来想添加一些语句，
    却忘了写{}，就改变了if...else...的语义  
    建议永远都要写上{}

    多行条件判断  if(){}else if(){}...else{}
        如果还要更细致地判断条件，可以使用多个if...else...的组合
        通常把else if连写在一起，来增加可读性。
    
    请注意，if...else...语句的执行特点是二选一，在多个if...else...语句中，如果某个条件成
    立，则后续就不再继续判断了。 因此 条件判断的顺序非常重要

循环
    for循环，通过初始条件、结束条件和递增条件来循环执行语句块

        for(初始条件;结束条件;递增条件)
        {......}
        for循环最常用的地方是利用索引来遍历数组
        for循环的3个条件都是可以省略的，如果没有退出循环的判断条件，就必须使用break语句退出循环，
        否则就是死循环

        for ... in 
        for循环的一个变体，它可以把一个对象的所有属性依次循环出来,包括继承的属性
        for(var key in obj){...}
        要过滤掉对象继承的属性，用hasOwnProperty() 来实现 (if先判断 再输出)

        请注意，for ... in对Array的循环得到的是String而不是Number  
        key对应的索引'0','1'......   String 类型
    while
        for循环在已知循环的初始和结束条件时非常有用。而上述忽略了条件的for循环容易让人看不清循环的逻辑，
        此时用while循环更佳。
        while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。
    do ... while
        最后一种循环是do { ... } while()循环，它和while循环的唯一区别在于，不是在每次循环开始的时
        候判断条件，而是在每次循环完成的时候判断条件
        用do { ... } while()循环要小心，循环体会至少执行1次，而for和while循环则可能一次都不执行。
Map和Set
    








            