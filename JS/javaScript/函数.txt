定义函数:
    在JavaScript中，定义函数的方式如下：
    function fn(x) {
        if (x >= 0) {
            return x;
        } else {
            return -x;
        }
    } 

    上述fn()函数的定义如下：
        function指出这是一个函数定义；
        fn是函数的名称；
        (x)括号内列出函数的参数，多个参数以,分隔；
        { ... }之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。
        请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，
        函数内部通过条件判断和循环可以实现非常复杂的逻辑。

        如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。

        由于JavaScript的函数也是一个对象，上述定义的fn()函数实际上是一个函数对象，而函数名abs可以视为指向该函数的变量。

    第二种定义函数的方式如下：
        var abs = function (x) {
                    if (x >= 0) {
                        return x;
                    } else {
                        return -x;
                    }
                };
    在这种方式下，function (x) { ... }是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量abs，所以，通过变量abs就可以调用该函数。

    ß上述两种定义完全等价，注意第二种方式按照完整语法需要在函数体末尾加一个;，表示赋值语句结束。

调用函数:
    调用函数时，按顺序传入参数即可
    JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不
    需要这些参数
    传入的参数比定义的少也没有问题,此时函数的参数将收到undefined，要避免收到undefined，
    可以对参数进行检查

arguments
    JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入
    的所有参数。arguments类似Array但它不是一个Array

    利用arguments，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值

    实际上arguments最常用于判断传入参数的个数 arguments.length

rest参数
    由于JavaScript函数允许接收任意个参数，于是我们就不得不用arguments来获取所有参数
        function foo(a, b) {
            var i, rest = [];
            if (arguments.length > 2) {
                for (i = 2; i<arguments.length; i++) {
                    rest.push(arguments[i]);
                }
            }
            console.log('a = ' + a);
            console.log('b = ' + b);
            console.log(rest);
         }    
    为了获取除了已定义参数a、b之外的参数，我们不得不用arguments，并且循环要从索引2开始以便排除前两个参数，
    这种写法很别扭，只是为了获得额外的rest参数，有没有更好的方法？
    ES6标准引入了rest参数，上面的函数可以改写为
    function foo(a, b, ...rest) {
        console.log('a = ' + a);
        console.log('b = ' + b);
        console.log(rest);
        }
    rest参数只能写在最后，前面用...标识，从运行结果可知，传入的参数先绑定a、b，多余的参数以数组形式交给变量rest，所以，不再需要arguments我们就获取了全部参数。
    如果传入的参数连正常定义的参数都没填满，也不要紧，rest参数会接收一个空数组（注意不是undefined）。
    因为rest参数是ES6新标准，所以你需要测试一下浏览器是否支持。

return   语句
    JavaScript引擎有一个在行末自动添加分号的机制，如果把return语句拆成两行,JavaScript引擎在行末
    自动添加分号的机制，上面的代码实际上变了,让你栽到return语句的一个大坑.
    所以,return语句不换行,要换行,就要加上{.....}

变量作用域   (由内到外)
    在JavaScript中，用var申明的变量实际上是有作用域的。
    如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量
    如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，
    不同函数内部的同名变量互相独立，互不影响
    由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行
    avaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了
    与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量

    变量提升
        JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部
        JavaScript引擎自动提升了变量y的声明，但不会提升变量y的赋值
        由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明
        所有变量”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量

    全局作用域
        不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，
        全局作用域的变量实际上被绑定到window的一个属性

        由于函数定义有两种方式，以变量方式var fn = function () {}定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象

        JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，
        就会继续往上查找，最后如果在全局作用域中也没有找到，则报ReferenceError错误

    命名空间
        全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层
        函数，都会造成命名冲突，并且很难被发现。减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中
        // 唯一的全局变量MYAPP:
        var MYAPP = {};

        // 其他变量:
        MYAPP.name = 'myapp';
        MYAPP.version = 1.0;

        // 其他函数:
        MYAPP.foo = function () {
            return 'foo';
        };
        把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。

    局部作用域
        由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量
        的
        function foo() {
            for (var i=0; i<100; i++) {
                //
            }
            i += 100; // 仍然可以引用变量i
        }
        为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量
        function foo() {
            var sum = 0;
            for (let i=0; i<100; i++) {
                sum += i;
            }
            // SyntaxError:
            i += 1;
        }

        常量
        ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域

解构赋值
    ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值
    什么是解构赋值？我们先看看传统的做法，如何把一个数组的元素分别赋值给几个变量

    var array = ['hello', 'JavaScript', 'ES6'];
    var x = array[0];
    var y = array[1];
    var z = array[2];

    现在，在ES6中，可以使用解构赋值，直接对多个变量同时赋值
    var [x, y, z] = ['hello', 'JavaScript', 'ES6']
    注意，对数组元素进行解构赋值时，多个变量要用[...]括起来。
    如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致
    let [x, [y, z]] = ['hello', ['JavaScript', 'ES6']]
    解构赋值还可以忽略某些元素
    let [, , z] = ['hello', 'JavaScript', 'ES6']; // 忽略前两个元素，只对z赋值第三个元素

    如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性

    var person = {
    name: '小明',
    age: 20,
    gender: 'male',
    passport: 'G-12345678',
    school: 'No.4 middle school'
    };
    var {name, age, passport} = person;

    对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的

    使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为undefined，这和引用一个不存在的属性获得undefined是一致的。
    如果要使用的变量名和属性名不一致，可以用下面的语法获取{属性名:变量名}

    解构赋值还可以使用默认值，这样就避免了不存在的属性返回undefined的问题 
     {x=1}={...} //1就是默认值
    有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误

方法  

    在一个对象中绑定函数，称为这个对象的方法。 
    绑定到对象上的函数称为方法，和普通函数也没啥区别，但是它在内部使用了一个this关键字

    JavaScript的函数内部如果调用了this，那么这个this到底指向谁？视情况而定
    如果以对象的方法形式调用，比如 对象.方法()，该函数的this指向被调用的对象  
    单独调用函数，比如 fn()，此时，该函数的this指向全局对象，也就是window

    ECMA决定，在strict模式下让函数的this指向undefined，因此，在strict模式下，你会得到一个错误
    这个决定只是让错误及时暴露出来，并没有解决this应该指向的正确位置

    修复的办法也不是没有，我们用一个that变量首先捕获this,需要在方法内部一开始就捕获this
    用var that = this;，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。

    apply

    虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，
    我们还是可以控制this的指向的！

    要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，
    第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。
    fn.apply(obj,[参数数组]);

    另一个与apply()类似的方法是call()，唯一区别是：
        apply()把参数打包成Array再传入；
        call()把参数按顺序传入

    对普通函数调用，我们通常把this绑定为null
