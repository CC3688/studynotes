高阶函数
    JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以
    接收另一个函数作为参数，这种函数就称之为高阶函数

    map
        举例说明，比如我们有一个函数f(x)=x2，要把这个函数作用在一个数组[1, 2, 3, 4, 5, 6, 7, 8,
         9]上，就可以用map实现如下

         function fn(x){return x*x;}
         result=arr.map(fn);
         map()传入的参数是fn，即函数对象本身

    reduce
        再看reduce的用法。Array的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算，其效果就是：
        [x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)
    
    filter
        filter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素
        和map()类似，Array的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。
        如，在一个Array中，删掉偶数，只保留奇数，可以这么写：
        var arr = [1, 2, 4, 5, 6, 9, 10, 15];
        var r = arr.filter(function (x) {
            return x % 2 !== 0;
        });
        r; // [1, 5, 9, 15]

        回调函数

        filter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示Array的某个元素。
        回调函数还可以接收另外两个参数，表示元素的位置和数组本身
        var arr = ['A', 'B', 'C'];
        var r = arr.filter(function (element, index, self) {
            console.log(element); // 依次打印'A', 'B', 'C'
            console.log(index); // 依次打印0, 1, 2
            console.log(self); // self就是变量arr
            return true;
        });

    sort
        排序算法
        JavaScript的Array的sort()方法就是用于排序的,默认把所有元素先转换为String再排序,按ASCII码大小排序.

        sort()方法也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序
        要按数字大小排序，我们可以这么写:
        arr.sort(function (x, y) {
            if (x < y) {
                return -1;
            }
            if (x > y) {
                return 1;
            }
            return 0;
        });
        默认情况下，对字符串排序，是按照ASCII的大小比较的，现在，我们提出排序应该忽略大小写，按照字母序排序。要实现这个算法，不必对现有代码大加改动，只要我们能定义出忽略大小写的比较算法就可以
        arr.sort(function (s1, s2) {
            x1 = s1.toUpperCase();
            x2 = s2.toUpperCase();
            if (x1 < x2) {
                return -1;
            }
            if (x1 > x2) {
                return 1;
            }
            return 0;
        });
        忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较。
        从上述例子可以看出，高阶函数的抽象能力是非常强大的，而且，核心代码可以保持得非常简洁。
        最后友情提示，sort()方法会直接对Array进行修改，它返回的结果仍是当前Array