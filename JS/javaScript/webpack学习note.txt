npm init -y       //初始化一个项目  -y 表示使用默认的 设置  (这样不用老回车设置默认)

npm i -D          //安装模块  i 是install的简写 -D 表示安装的是开发的依赖
                 // webpack 是开始时用,上线不需要的
                 // -D 后接模块名
要运行的命令 在 package.json 里的 "scripts" 声名
key - value 自己起key名
"dev":"webpack"    告诉要运行webpack 默认会找到webpack.config.js
                   如果配置文件不是webpack.config.js(默认名)
                   就需要在这里注名一下,如果,你把配置文件名改为:webpack.config.dev.js
                   "dev":"webpack --config webpack.config.dev.js" 

然后 
npm run dev     //就完成了打包

webpack 插件   可以扩展webpack 的功能

html-webpack-plugin   可以帮忙创建文件  把打包好的文件 引入到html文件中
npm  i -D html-webpack-plugin   //安装方法
            使用插件 需要在配置文件里声明, 增加plugins:[]
            数组可以使用多个插件
            当然使用前需要  先把插件 require 进来
            然后new 一个实例出来     也可以同时传入配置 {}
            filename:'aac.html',    指定文件名
            template:'src/index.html'    指定模板,在模板的基础上生成文件


loader 就是webpack 用来预处理模块的     不用先require进来
       在一个模块被引入之前,会预先使用loader处理模块的内容
需要先安装loader相关的 模块
npm i -D 模块名     //npm i -D babel-loader babel-core
npm i   就可以安装 项目原来需要安装的依赖
npm i -S  模块名      //安装 模块  并写入到依赖里面

需要在配置文件里增加一个module:{}
对像里有个 rules:[{}]     用正则  test:/\.js/,  
                                use:[{}]     配置后用什么loader在此声明
                                use里声明 loader:名字
                                         options:{
                                             presets:['react']    //这个也需要先安装
                                         }
npm i -D babel-preset-react

devServer   需要先下载     服务器
npm i -D webpack-dev-server
然后在package  的"scripts" 增加一个 "start"  这里名字可以随便起  
要运行 scripts 里的命令  可以用 npm run 命令
但start 字段比较特殊,可以省略  直接npm run 就行
它会先找到配置文件 先打包 再开启服务   如果配置文件不是webpack.config.js(默认名)
                   就需要在这里注名一下,如果,你把配置文件名改为:webpack.config.dev.js
                   "start":"webpack-dev-server --config webpack.config.dev.js" 
打包的资源 放在内存里面(不是放在硬盘)
会监视文件的变化,保存后会触发打包,自动刷新浏览器,看到最新的效果
如果 想对服务器进行配置 可以写在webpack的配置文件里
添加一个属性 devServer:{}
 devServer:{
     open:true,
     port:9000
 }
 添加open,运行就可以 自动打开 浏览器
 port,可以指定想要监听的端口
 功能还有很多
 如果 想退出 就用 crtl+c 

 任何资源 css  图片 等资源  都会被 webpack 当做模块  来打包
 在主文件 用下列语法来引入 模块
 import './main.css'
 引入css-loader
 {
     test:/\.css$/,
     use:['style-loader','css-loader']     
             使用默认配置,就可以这样直接写,不需要写个对象形式如果要配置就
             webpack会从后面开始处理,先处理css文件 再交给sytle处理
 }
 先安装  npm i -D css-loader
        npm i -D style-loader
css光css-loader 还不够,还需要 style-loader
处理css文件 中出现的url  会自动帮你引入里面要处理的模块


图片  webpack的处理 需要 file-loader     
{
    test:/\.png$/,    //test:/\.(png|gif|jpg|jpeg)$/
    use:['file-loader']
}
npm i -D file-loader
   file-loader 会自动把图片移到指定的目录,并重新命名
   命名其实就是一个加载路径
file-loader 1把你的资源移到输出目录 2返回最终引入资源的url


增强的file-loader: url-loader   也可以处理 文件图片
{
    test:/\.png$/,    //test:/\.(png|gif|jpg|jpeg)$/
    use:['url-loader']
}
会把图片 用base64编码 好处是 减少请求   但文件太了,编码时间就变长


所以应该和file-loader配合使用,文件小用url-loader,文件大用file-loader
可以像下面这样设置,设置 可以用base64编码的文件限制大小,当不超过限制值就编码
超过就用就会自动用file-loader来打包(不用于写file-loader的配置)
{
   test:/\.(png|gif|jpg|jpeg)$/,
        use:[{
            loader:'url-loader',
         options:{
               limit:40000
               }
        }]
}

字体 需要file-loader 
{
    test:/\.(ttf|eot|svg|woff|woff2|otf)$/,
     use:['file-loader']
}


webpack 写路径 url 时, ? 后然的字符(包括?)会被忽略,
如果是非? 其他符号就不会被忽略


css模块化  需要如下更改配置    类名会被重新编码
{
    test:/\.css$/,
    use:[
        'style-loader',
        {
            loader:'css-loader',
            options:{
                      module:true
                    }
            }]
},
然后,导入css 就不能 像之前import './common/style/main.css';  这样来导入
要这样来:import style from './common/style/main.css';(style是你起的变量)
style 是一个对象  需要添加一个类 : style.类名

如果你想让一些css文件不用模块化,就需要添加 一个exclude来排除一下,
{
    test:/\.css$/,
    use:[
        'style-loader',
        {
            loader:'css-loader',
            options:{
                module:true,
                loaderIdentName:'[path]-[name]-[local][hash:base64:6]'
            }
        }
    ],
    exclude:[
        path.resolve(__dirname,'node_modules'),
        path.resolve(__dirname,'src/common')
    ]
},
然而此时,css文件就没有load来处理了,就需要在后面加上
 {
    test:/\.css$/,
    use:['style-loader','css-loader'],
    include:[
            path.resolve(__dirname,'node_modules'),
            path.resolve(__dirname,'src/common')
        ]
},
注意,上面的两个对象,exclude,include,要对应(就是要一样),这样可以避免,重复,报错

loader的运行是从后面向上,从右边向左


less和scss   
scss
先安装如下loader
npm i -D sass-loader node-sass
然后添加配置
{
    test:/\.scss$/,
    use:['style-loader','css-loader','sass-loader']
},
import  from url  这样就可以直接使用 类
这样处理完sass会得到标准的css代码，如果还要模块化，可以在css-loader那里
设置就可以了。
{
    test:/\.scss$/,
    use:[
        'style-loader',
        {
            loader: 'css-loader',
            options:{
                module:true,
                localIdentName:'[path]-[name]-[local]-[hash:base64:6]'
            }
        },
        'sass-loader'
    ]
},
使用了模块化，则在引入文件里需用一个变量来接收一下
import var from 'url'    var.类
如果也想像前面css文件那样，有的要模块化，有的不模块化，可以参照前面的写法
{
    test:/\.scss$/,
    use:[
        'style-loader',
        {
            loader:'css-loader',
            options:{
                module:true,
                localIdentName:'[path]-[name]-[local]-[hash:base64:6]'
            }
        },
        'sass-loader'
    ],
    exclude:[
        path.resolve(__dirname,'node_modules'),
        path.resolve(__dirname,'src/common')
    ]
},
{
    test:/\.scss$/,
    use:['style-loader','css-loader','sass-loader'],
    include:[
        path.resolve(__dirname,'node_modules'),
        path.resolve(__dirname,'src/common')
    ]
},
less  先安装如下
npm i -D less-loader less
配置和sass的很像
{
    test:/\.less$/,
    use:[
        'style-loader',
        {
            loader:'css-loader',
            options:{
                module:true,
                localIdentName:'[path]-[name]-[local]-[hash:base64:6]'
            }
        },
        'less-loader'
    ],
    exclude:[
        path.resolve(__dirname,'node_modules'),
        path.resolve(__dirname,'src/common')
    ]
},
{
    test:/\.less$/,
    use:['style-loader','css-loader','less-loader'],
    include:[
        path.resolve(__dirname,'node_modules'),
        path.resolve(__dirname,'src/common')
    ]
},                


babel
npm i -D babel
这样非全局安装，编译文件时需要这样写
./node_modules/.bin/babel  src/(要编译的文件)
这么长，也可以在package.json里的sripts里写
"scripts": {
    "a": "babel src/app.js"   
  },
//a是自定义的，在此处写的babel写会自动从node_modules查找到.bin/babel
//然后，你就可以直接在命令行，写npm run a

.babelrc 是babel的配置文件
{
    "plugins":["插件名"，"插件名"]     //注意这里要用 双引号 
}
本质上 ES6的一个新语法，就需装一个新插件来实现编译
但babel提供了另外的解决方案：预设  
下载 ES2015 的预设  就可以了，不用去理那各个功能，就直接用就是
npm i -D babel-preset-es2015
然后在配置文件
{
    "presets": [
        "es2015"
    ]
}
另还有一个env的预设，只能处理是被批准的确定的标准的新语法（草案中的语法不能）
npm i -D babel-preset-env

草案中的语法  需要再安装其他插件
如：var a={a:1,b:2}
console.log({...a,c:3});
需要先安装
npm i -D babel-plugin-transform-object-rest-spread
然后在配置文件里写好
如果是和webpack配合使用就 如下，就是添加plugins
{
    test:/\.js$/,
    use:[{
        loader:'babel-loader',
        options:{
            presets:['react','env'],
            plugins:['transform-object-rest-spread']
        }
    }]
}

如果要输出 可以在 命令后面写 -o 输出的地址及文件名
是在package.json写的
"scripts": {
    "babel": "babel src/app.js -o out/a.js"
  },

优化：
可以用exclude 排除一些不需要编译的文件，优化编译速度，加速打包速度
{
    test:/\.js$/,
    use:[{
        loader:'babel-loader',
        options:{
            presets:['react','env'],
            plugins:['transform-object-rest-spread']
        }
    }],
    exclude:[path.resolve(__dirname,'node_modules')]
},
由于babel的配置项目很多，可以单独写 .babeIrc文件，从webpack配置文件中
抽出来。然后把上面的options 删掉
{  
    "presets":["react","env"],
    "plugins":["transform-object-rest-spread"]   
}

output 的优化
npm i -D clean-webpack-plugin
然后在配置文件里
const CleanWebpackPlugin =  require('clean-webpack-plugin');
先引入，然后再在配置文件里写入的插件
plugins:[
       new HtmlWebpackPlugin({
           filename:'../index.html',
           template:'src/index.html'
       }),
       new CleanWebpackPlugin(['dist'])
    ],
这样运行打包命令时，会先清除指定的文件，然后再打包.
注意，filename:../表示在上级目录，建index.html。可以给filename增加路径文件名

如果 也要改变其它类型的文件件output出来的 路径，就需在use:[{}]里设置参数
如字体，可以这样增加  （路径都是在output path 下面接下去）
{
    test:/\.(ttf|eot|svg|woff|woff2|otf)$/,
    use:[{
        loader:'file-loader',
        options:{
            name:'fonts/[name]_[hash:8].[ext]'
        }
    }]
}
//[name]表示原文件名，[hash:8]表示64位的hash值取8位 [ext]表示后缀 _和.原样输出

图片也要叫这样处理，让打包后的图片放在一个指定的文件夹里
{
    test:/\.(png|gif|jpg|jpeg)$/,
    use:[{
        loader:'url-loader',
        options:{
            limit:40000,
            name:'img/[name]_[hash:8].[ext]'
        }
    }]
},

js文件   在output里设置
output:{
        path:path.resolve(__dirname,'dist/assets'),
        filename:'js/app.js'
    },

分门别类这样打包了，但要注意一下路径问题，这样会还需解决资源的加载路径问题
需要添加publicPath来修正一下路径，所有打包的文件路径，会自动添加上publicPath的值
output:{
        path:path.resolve(__dirname,'dist/assets'),
        filename:'js/app.js',
        publicPath:'assets/'   //所有资源的基础路径，一定要加上/
    },
此项目 需添加 这样值的publicPath，和上面的path设置有关。修正，就是要让index.html
正确加载资源，因为index.html 先返回了一层所有资源加载出错，需要这样修复。
注意publicPath:'assets/' 后面的/ 一定要加上

devServer 会出错，deServeer 查找资源 内存里查找打包好的  还有在本地查找
可以通过
devServer:{
        open:true,
        contentBase:'./src/common'
    }
当在内存中查找不到，就到这个指定的路径里找.这里也需一个publicPath。如果没有，webpack会去找output里的publicPath,然后就出错了
devServer:{
        open:true,
        contentBase:'./src/common',
        publicPath:'/'               
    }
    //服务器打包资源的输出路径，查找的起点只能往后去查找，而前面的index,是先返回一级。所以一般是不会在 filename 不会设置为..的，

全文改后，结果webpack.config.js成了下面这个样子：
const HtmlWebpackPlugin = require('html-webpack-plugin');
const path = require('path');
const CleanWebpackPlugin =  require('clean-webpack-plugin');

module.exports = {
    entry:'./src/app.js',
    output:{
        path:path.resolve(__dirname,'dist/'),
        filename:'assets/js/app.js',
        publicPath:'/'
    },
    plugins:[
       new HtmlWebpackPlugin({
           filename:'index.html',
           template:'src/index.html'
       }),
       new CleanWebpackPlugin(['dist'])
    ],
    module:{
        rules:[{
                    test:/\.js$/,
                    use:[{
                        loader:'babel-loader',
                    }],
                    exclude:[path.resolve(__dirname,'node_modules')]
               },
               {
                    test:/\.css$/,
                    use:[
                        'style-loader',
                        {
                            loader:'css-loader',
                            options:{
                                module:true,
                                localIdentName:'[path]-[name]-[local]-[hash:base64:6]'
                            }
                        }
                    ],
                    exclude:[
                        path.resolve(__dirname,'node_modules'),
                        path.resolve(__dirname,'src/common')
                    ]
               },
               {
                    test:/\.css$/,
                    use:['style-loader','css-loader'],
                    include:[
                        path.resolve(__dirname,'node_modules'),
                        path.resolve(__dirname,'src/common')
                    ]
               },
               {
                    test:/\.scss$/,
                    use:[
                        'style-loader',
                        {
                            loader:'css-loader',
                            options:{
                                module:true,
                                localIdentName:'[path]-[name]-[local]-[hash:base64:6]'
                            }
                        },
                        'sass-loader'
                    ],
                    exclude:[
                        path.resolve(__dirname,'node_modules'),
                        path.resolve(__dirname,'src/common')
                    ]
                },
                {
                    test:/\.scss$/,
                    use:['style-loader','css-loader','sass-loader'],
                    include:[
                        path.resolve(__dirname,'node_modules'),
                        path.resolve(__dirname,'src/common')
                    ]
                },
                {
                    test:/\.less$/,
                    use:[
                        'style-loader',
                        {
                            loader:'css-loader',
                            options:{
                                module:true,
                                localIdentName:'[path]-[name]-[local]-[hash:base64:6]'
                            }
                        },
                        'less-loader'
                    ],
                    exclude:[
                        path.resolve(__dirname,'node_modules'),
                        path.resolve(__dirname,'src/common')
                    ]
                },
                {
                    test:/\.less$/,
                    use:['style-loader','css-loader','less-loader'],
                    include:[
                        path.resolve(__dirname,'node_modules'),
                        path.resolve(__dirname,'src/common')
                    ]
                },                
                {
                    test:/\.(png|gif|jpg|jpeg)$/,
                    use:[{
                        loader:'url-loader',
                        options:{
                           limit:10000,
                           name:'assets/img/[name]_[hash:8].[ext]'
                        }
                   }]
                },
                {
                    test:/\.(ttf|eot|svg|woff|woff2|otf)$/,
                    use:[{
                        loader:'file-loader',
                        options:{
                            name:'assets/fonts/[name]_[hash:8].[ext]'
                        }
                    }]
                }
        ]
    },
    devServer:{
        open:true,
        contentBase:'./src/common',
        publicPath:'/'
    }
};


//path 需要用绝对路径  可以用 path 模块 来帮助我们处理路径的问题